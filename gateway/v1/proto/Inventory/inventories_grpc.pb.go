// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: inventories.proto

package Inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_AddInventory_FullMethodName    = "/Inventory.v1.InventoryService/AddInventory"
	InventoryService_UpdateInventory_FullMethodName = "/Inventory.v1.InventoryService/UpdateInventory"
	InventoryService_RemoveInventory_FullMethodName = "/Inventory.v1.InventoryService/RemoveInventory"
	InventoryService_GetInventory_FullMethodName    = "/Inventory.v1.InventoryService/GetInventory"
	InventoryService_ListInventories_FullMethodName = "/Inventory.v1.InventoryService/ListInventories"
	InventoryService_AddCategory_FullMethodName     = "/Inventory.v1.InventoryService/AddCategory"
	InventoryService_UpdateCategory_FullMethodName  = "/Inventory.v1.InventoryService/UpdateCategory"
	InventoryService_RemoveCatgory_FullMethodName   = "/Inventory.v1.InventoryService/RemoveCatgory"
	InventoryService_GetCatgories_FullMethodName    = "/Inventory.v1.InventoryService/GetCatgories"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	AddInventory(ctx context.Context, in *AddInvenRequest, opts ...grpc.CallOption) (*AddInvenResponse, error)
	UpdateInventory(ctx context.Context, in *UpdateInvenRequest, opts ...grpc.CallOption) (*UpdateInvenResponse, error)
	RemoveInventory(ctx context.Context, in *RemoveInvenRequest, opts ...grpc.CallOption) (*RemoveInvenResponse, error)
	GetInventory(ctx context.Context, in *GetInvetoryRequest, opts ...grpc.CallOption) (*GetInvetoryResponse, error)
	ListInventories(ctx context.Context, in *ListInvetoriesRequest, opts ...grpc.CallOption) (*ListInvetoriesResponse, error)
	AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*AddCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	RemoveCatgory(ctx context.Context, in *RemoveCatgoryRequest, opts ...grpc.CallOption) (*RemoveCatgoryResponse, error)
	GetCatgories(ctx context.Context, in *GetCatgoriesRequest, opts ...grpc.CallOption) (*GetCatgoriesResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) AddInventory(ctx context.Context, in *AddInvenRequest, opts ...grpc.CallOption) (*AddInvenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInvenResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateInventory(ctx context.Context, in *UpdateInvenRequest, opts ...grpc.CallOption) (*UpdateInvenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvenResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RemoveInventory(ctx context.Context, in *RemoveInvenRequest, opts ...grpc.CallOption) (*RemoveInvenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveInvenResponse)
	err := c.cc.Invoke(ctx, InventoryService_RemoveInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *GetInvetoryRequest, opts ...grpc.CallOption) (*GetInvetoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvetoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListInventories(ctx context.Context, in *ListInvetoriesRequest, opts ...grpc.CallOption) (*ListInvetoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvetoriesResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListInventories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*AddCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCategoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RemoveCatgory(ctx context.Context, in *RemoveCatgoryRequest, opts ...grpc.CallOption) (*RemoveCatgoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCatgoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_RemoveCatgory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCatgories(ctx context.Context, in *GetCatgoriesRequest, opts ...grpc.CallOption) (*GetCatgoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCatgoriesResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCatgories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	AddInventory(context.Context, *AddInvenRequest) (*AddInvenResponse, error)
	UpdateInventory(context.Context, *UpdateInvenRequest) (*UpdateInvenResponse, error)
	RemoveInventory(context.Context, *RemoveInvenRequest) (*RemoveInvenResponse, error)
	GetInventory(context.Context, *GetInvetoryRequest) (*GetInvetoryResponse, error)
	ListInventories(context.Context, *ListInvetoriesRequest) (*ListInvetoriesResponse, error)
	AddCategory(context.Context, *AddCategoryRequest) (*AddCategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	RemoveCatgory(context.Context, *RemoveCatgoryRequest) (*RemoveCatgoryResponse, error)
	GetCatgories(context.Context, *GetCatgoriesRequest) (*GetCatgoriesResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) AddInventory(context.Context, *AddInvenRequest) (*AddInvenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventory not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateInventory(context.Context, *UpdateInvenRequest) (*UpdateInvenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventory not implemented")
}
func (UnimplementedInventoryServiceServer) RemoveInventory(context.Context, *RemoveInvenRequest) (*RemoveInvenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInventory not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventory(context.Context, *GetInvetoryRequest) (*GetInvetoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ListInventories(context.Context, *ListInvetoriesRequest) (*ListInvetoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInventories not implemented")
}
func (UnimplementedInventoryServiceServer) AddCategory(context.Context, *AddCategoryRequest) (*AddCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedInventoryServiceServer) RemoveCatgory(context.Context, *RemoveCatgoryRequest) (*RemoveCatgoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCatgory not implemented")
}
func (UnimplementedInventoryServiceServer) GetCatgories(context.Context, *GetCatgoriesRequest) (*GetCatgoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatgories not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_AddInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddInventory(ctx, req.(*AddInvenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateInventory(ctx, req.(*UpdateInvenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RemoveInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInvenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RemoveInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_RemoveInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RemoveInventory(ctx, req.(*RemoveInvenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvetoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventory(ctx, req.(*GetInvetoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListInventories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvetoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListInventories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListInventories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListInventories(ctx, req.(*ListInvetoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddCategory(ctx, req.(*AddCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RemoveCatgory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCatgoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RemoveCatgory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_RemoveCatgory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RemoveCatgory(ctx, req.(*RemoveCatgoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCatgories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatgoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCatgories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCatgories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCatgories(ctx, req.(*GetCatgoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInventory",
			Handler:    _InventoryService_AddInventory_Handler,
		},
		{
			MethodName: "UpdateInventory",
			Handler:    _InventoryService_UpdateInventory_Handler,
		},
		{
			MethodName: "RemoveInventory",
			Handler:    _InventoryService_RemoveInventory_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _InventoryService_GetInventory_Handler,
		},
		{
			MethodName: "ListInventories",
			Handler:    _InventoryService_ListInventories_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _InventoryService_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _InventoryService_UpdateCategory_Handler,
		},
		{
			MethodName: "RemoveCatgory",
			Handler:    _InventoryService_RemoveCatgory_Handler,
		},
		{
			MethodName: "GetCatgories",
			Handler:    _InventoryService_GetCatgories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventories.proto",
}
